close all

%% Visualize space filling rates

cases = [[5 10 15 20] 25.*2.^[0:7]];
all_sigma = zeros(1, size(cases, 2));
all_sigma_over_time = zeros(2000, size(cases, 2));
all_residuals = zeros(1, size(cases, 2));
all_res_over_time = zeros(2000, size(cases, 2));

for i = 1:size(cases, 2)
    numvars = cases(i);
    populations_filename = strcat("./frames/archive radial 2023 11 16/radial_disassembly(13)_", num2str(numvars), "(1)/populations.txt");
    colors_filename = strcat("./frames/archive radial 2023 11 16/radial_disassembly(13)_", num2str(numvars), "(1)/colors.txt");

    [newfig, sigma, sigma_over_time, res, res_over_time, mu] = vs_2d_space(populations_filename, colors_filename, numvars);
    all_sigma(i) = sigma;
    all_sigma_over_time(:, i) = sigma_over_time;
    all_residuals(i) = res;
    all_res_over_time(:, i) = smooth(abs(res_over_time), 200);
end

% Residuals over time
figure
hold on
markers = {"-o", "-+", "-*", "-v", "-x", "-square", "-diamond", "-^", "->", "-<", "-pentagram", "-hexagram"};
for i = 1:size(cases, 2)
    p = plot(all_res_over_time(:, i), markers{i});
    p.MarkerIndices = 1:50:size(all_res_over_time, 1);
end
hold off
legend("5", "10", "15", "20", "25", "50", "100", "200", "400", "800", "1600", "3200")
title("Variance over Time")

% Std deviation over time
figure
hold on
markers = {"-o", "-+", "-*", "-v", "-x", "-square", "-diamond", "-^", "->", "-<", "-pentagram", "-hexagram"};
for i = 1:size(cases, 2)
    p = plot(all_sigma_over_time(:, i), markers{i});
    p.MarkerIndices = 1:50:size(all_sigma_over_time, 1);
end
hold off
legend({"5", "10", "15", "20", "25", "50", "100", "200", "400", "800", "1600", "3200"}, "Location", "northwest")
title("Std. Dev. over Time")

% Std deviation at interval time limit populations
figure
hold on
% xx is TIME STEPS
xx = [100 200 300 400 500 1000 1500 2000];
markers = {"--o", "--+", "--*", "--v", "--x", "--square", "--diamond", "--^", "-->", "--<", "--pentagram", "--hexagram"};
for i = 1:size(xx, 2)
    x = xx(i);
    plot(log(cases/min(cases))/log(2), all_sigma_over_time(x, :), markers{i})
end
xticks(log(cases/min(cases))/log(2))
xticklabels({"5", "10", "15", "20", "25", "50", "100", "200", "400", "800", "1600", "3200"})
legend("100", "200", "300", "400", "500", "1000", "1500", "2000")
title("Std. Dev. per time interval")

hold off

function [statsfig, sigma, sigma_over_time, var, res_over_time, mu] = vs_2d_space(pfilename, cfilename, numvars, dataLines)
%IMPORTFILE Import data from a text file
%  POPULATIONS = IMPORTFILE(FILENAME) reads data from text file FILENAME
%  for the default selection.  Returns the data as a table.
%
%  POPULATIONS = IMPORTFILE(FILE, DATALINES) reads data for the
%  specified row interval(s) of text file FILENAME. Specify DATALINES as
%  a positive scalar integer or a N-by-2 array of positive scalar
%  integers for dis-contiguous row intervals.
%
%  Example:
%  populations = importfile("/Users/dfu/Documents/dendritic-stam/frames/radial_disassembly(13)_25(1)/populations.txt", [1, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 28-Aug-2023 10:58:45

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 4
    dataLines = [1, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", numvars);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = " ";

% Specify column names and types
tempVariableNames = strings(1, numvars);
tempVariableTypes = strings(1, numvars);
for i = 1:numvars
    tempVariableNames(i) = strcat("VarName", num2str(i));
    tempVariableTypes(i) = "double";
end
opts.VariableNames = tempVariableNames;
opts.VariableTypes = tempVariableTypes;

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";
opts.ConsecutiveDelimitersRule = "join";
opts.LeadingDelimitersRule = "ignore";

% Specify variable properties
opts = setvaropts(opts, ["VarName1", strcat("VarName", num2str(numvars))], "TrimNonNumeric", true);
opts = setvaropts(opts, ["VarName1", strcat("VarName", num2str(numvars))], "ThousandsSeparator", ",");

% Import the data
stats = readtable(pfilename, opts);

%% Clear temporary variables
clear opts

%IMPORTFILE Import data from a text file
%  COLORS = IMPORTFILE(FILENAME) reads data from text file FILENAME for
%  the default selection.  Returns the data as a table.
%
%  COLORS = IMPORTFILE(FILE, DATALINES) reads data for the specified row
%  interval(s) of text file FILENAME. Specify DATALINES as a positive
%  scalar integer or a N-by-2 array of positive scalar integers for
%  dis-contiguous row intervals.
%
%  Example:
%  colors = importfile("/Users/dfu/Documents/dendritic-stam/frames/radial_disassembly(13)_25(1)/colors.txt", [1, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 28-Aug-2023 11:09:26

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 4
    dataLines = [1, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 3);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = " ";

% Specify column names and types
opts.VariableNames = ["VarName1", "VarName2", "VarName3"];
opts.VariableTypes = ["double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";
opts.ConsecutiveDelimitersRule = "join";
opts.LeadingDelimitersRule = "ignore";

% Specify variable properties
opts = setvaropts(opts, ["VarName1", "VarName3"], "TrimNonNumeric", true);
opts = setvaropts(opts, ["VarName1", "VarName3"], "ThousandsSeparator", ",");

% Import the data
colors = readtable(cfilename, opts);

%% Clear temporary variables
clear opts


%% Start
% Convert the import data into cell data
stats = stats{:,:};
colors = colors{:, :};

%% Plot the trends for each nucleated assembly
statsfig = figure;
close(statsfig);
% hold on
% for i=1:size(stats, 2)
%     plot(smooth(stats(:,i), 100), 'color', colors(i, :))
% end
% hold off
% svg_filename = strcat("Populations,Seeds(",num2str(numvars),")");
% fig_filename = strcat("Populations,Seeds(",num2str(numvars),").fig");
% yticklabels("")
% xticklabels("")
% saveas(statsfig, svg_filename, 'svg')
% yticklabels("auto")
% xticklabels("auto")
% title(["Populations, seeds=", num2str(numvars), "(Smooth)"])
% savefig(statsfig, fig_filename)

% Plot the trends for each nucleated assembly (non-smooth data)
% figure
% hold on
% for i=1:size(stats, 2)
%     plot(stats(:,i), 'color', colors(i, :))
% end
% hold off
% title(["Populations, seeds=", num2str(numvars)])

%% Standard deviation over time
sigma_over_time = zeros(size(stats, 1), 1);
for i=1:size(stats, 1)
    time_data = stats(i, :);
    sigma_over_time(i) = std(time_data);
end
% Plot
% figure
% plot(sigma_over_time)
% title(["Std dev. over time, seeds=", num2str(numvars)])
%% Moving average variance
last_dvar = zeros(size(stats, 1), 1);
for i = 1:size(stats, 2)
    dvar = stats(:, i) - smooth(stats(:, i), 100);
    last_dvar = last_dvar + dvar;
end
res_over_time = last_dvar/size(stats, 2);
% Plot
% figure
% plot(var_over_time)
% title(["1-Norm Variance over time, seeds=", num2str(numvars)])

%% Overall statistics
steady_state_data = stats(end, :);

sigma = std(steady_state_data);
var = sigma^2;
mu = mean(steady_state_data);

fprintf("Seeds: %d\nStd. Deviation: %d\nVariance: %d\nMean: %d\n\n", numvars, sigma, var, mu);

end